import pandas as pd
from sklearn.datasets import load_iris
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import silhouette_score
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt
import torch

# Load the Iris dataset
iris = load_iris()
data = iris.data
target = iris.target

# Normalize the features using StandardScaler
scaler = StandardScaler()
data = scaler.fit_transform(data)

# Convert data to PyTorch tensor
data_tensor = torch.tensor(data, dtype=torch.float32)

# k-Means Clustering using PyTorch
def kmeans(data, k, num_iterations):
    # Randomly initialize the centroids
    centroids = data[torch.randint(0, data.size(0), (k,))]

    for _ in range(num_iterations):
        # Assign each data point to the nearest centroid
        distances = torch.cdist(data, centroids)
        labels = torch.argmin(distances, dim=1)

        # Update centroids
        new_centroids = torch.stack([data[labels == i].mean(dim=0) for i in range(k)])
        
        # If centroids do not change, break the loop
        if torch.all(centroids == new_centroids):
            break
        centroids = new_centroids

    return labels, centroids

# Set parameters
k = 3  # Number of clusters
num_iterations = 100

# Run k-Means clustering
labels, centroids = kmeans(data_tensor, k, num_iterations)

# Evaluate clustering performance using silhouette score
sil_score = silhouette_score(data, labels.numpy())
print(f'Silhouette Score: {sil_score}')

# Visualize the Clusters
# Reduce dimensionality using PCA
pca = PCA(n_components=2)
reduced_data = pca.fit_transform(data)

# Plot the clusters
plt.figure(figsize=(8, 6))
for i in range(k):
    cluster_points = reduced_data[labels.numpy() == i]
    plt.scatter(cluster_points[:, 0], cluster_points[:, 1], label=f'Cluster {i}')
plt.scatter(pca.transform(scaler.inverse_transform(centroids.numpy()))[:, 0], pca.transform(scaler.inverse_transform(centroids.numpy()))[:, 1], s=300, c='red', marker='x', label='Centroids')
plt.title('k-Means Clustering on Iris Dataset')
plt.xlabel('PCA Component 1')
plt.ylabel('PCA Component 2')
plt.legend()
plt.show()
