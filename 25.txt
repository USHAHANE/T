import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader, TensorDataset
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, r2_score

# Step 1: Data Preprocessing
# Load your dataset
df = pd.read_csv('housing_prices.csv')  # Replace with your dataset path
features = df.drop('price', axis=1).values
prices = df['price'].values

# Normalize the data
scaler = StandardScaler()
features = scaler.fit_transform(features)

# Split the data
X_train, X_test, y_train, y_test = train_test_split(features, prices, test_size=0.2, random_state=42)

# Convert to PyTorch tensors
X_train = torch.tensor(X_train, dtype=torch.float32)
X_test = torch.tensor(X_test, dtype=torch.float32)
y_train = torch.tensor(y_train, dtype=torch.float32).view(-1, 1)
y_test = torch.tensor(y_test, dtype=torch.float32).view(-1, 1)

train_dataset = TensorDataset(X_train, y_train)
test_dataset = TensorDataset(X_test, y_test)

train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)
test_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)

# Step 2: Model Building
class HousingPriceNN(nn.Module):
    def __init__(self, input_dim):
        super(HousingPriceNN, self).__init__()
        self.fc1 = nn.Linear(input_dim, 64)
        self.fc2 = nn.Linear(64, 32)
        self.fc3 = nn.Linear(32, 1)
        self.leaky_relu = nn.LeakyReLU()
        self.dropout = nn.Dropout(0.3)
        
    def forward(self, x):
        x = self.leaky_relu(self.fc1(x))
        x = self.dropout(x)
        x = self.leaky_relu(self.fc2(x))
        x = self.fc3(x)
        return x

input_dim = X_train.shape[1]
model = HousingPriceNN(input_dim)

# Step 3: Training with Different Optimizers
def train_model(model, optimizer, criterion, num_epochs=50):
    for epoch in range(num_epochs):
        model.train()
        for inputs, labels in train_loader:
            optimizer.zero_grad()
            outputs = model(inputs)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()
        print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {loss.item():.4f}')

    return model

criterion = nn.MSELoss()

# Train with Adam optimizer
optimizer_adam = optim.Adam(model.parameters(), lr=0.001)
model_adam = train_model(model, optimizer_adam, criterion)

# Reinitialize the model for SGD training
model = HousingPriceNN(input_dim)
optimizer_sgd = optim.SGD(model.parameters(), lr=0.01, momentum=0.9)
model_sgd = train_model(model, optimizer_sgd, criterion)

# Step 4: Evaluation and Visualization
def evaluate_model(model, test_loader):
    model.eval()
    predictions = []
    actuals = []
    with torch.no_grad():
        for inputs, labels in test_loader:
            outputs = model(inputs)
            predictions.extend(outputs.numpy())
            actuals.extend(labels.numpy())
    
    mse = mean_squared_error(actuals, predictions)
    r2 = r2_score(actuals, predictions)
    print(f'MSE: {mse:.4f}, R2: {r2:.4f}')
    return predictions, actuals

predictions_adam, actuals = evaluate_model(model_adam, test_loader)
predictions_sgd, _ = evaluate_model(model_sgd, test_loader)

# Visualization
plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
plt.scatter(actuals, predictions_adam, color='blue')
plt.title('Adam Optimizer')
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')

plt.subplot(1, 2, 2)
plt.scatter(actuals, predictions_sgd, color='red')
plt.title('SGD Optimizer')
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')

plt.show()
