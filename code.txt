import os
import cv2
import numpy as np
import datetime
from sklearn.model_selection import train_test_split
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout

# Step 2: Data Preprocessing
def load_images(data_dir):
    images = []
    labels = []
    label_dict = {}
    current_label = 0
    
    for person_name in os.listdir(data_dir):
        person_dir = os.path.join(data_dir, person_name)
        if os.path.isdir(person_dir):
            label_dict[current_label] = person_name
            for image_name in os.listdir(person_dir):
                image_path = os.path.join(person_dir, image_name)
                image = cv2.imread(image_path)
                image = cv2.resize(image, (224, 224))
                images.append(image)
                labels.append(current_label)
            current_label += 1
            
    images = np.array(images)
    labels = np.array(labels)
    return images, labels, label_dict

data_dir = 'path_to_images_directory'
images, labels, label_dict = load_images(data_dir)
images = images / 255.0  # Normalize pixel values
X_train, X_test, y_train, y_test = train_test_split(images, labels, test_size=0.2, random_state=42)

# Step 3: CNN Model Design
model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(224, 224, 3)),
    MaxPooling2D((2, 2)),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Conv2D(128, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(len(label_dict), activation='softmax')
])

model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
model.summary()

# Step 4: Training the CNN
history = model.fit(X_train, y_train, epochs=20, validation_data=(X_test, y_test))

# Step 5: Model Evaluation
loss, accuracy = model.evaluate(X_test, y_test)
print(f'Test Accuracy: {accuracy*100:.2f}%')

# Step 6: Face Detection
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

def detect_faces(image):
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5)
    return faces

# Step 7: Attendance Marking System
attendance_log = {}

def mark_attendance(person_name):
    current_time = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    attendance_log[person_name] = current_time
    print(f'{person_name} marked present at {current_time}')

cap = cv2.VideoCapture(0)
while True:
    ret, frame = cap.read()
    faces = detect_faces(frame)
    for (x, y, w, h) in faces:
        face = frame[y:y+h, x:x+w]
        face = cv2.resize(face, (224, 224))
        face = face / 255.0
        face = np.expand_dims(face, axis=0)
        prediction = model.predict(face)
        person_label = np.argmax(prediction)
        person_name = label_dict[person_label]
        mark_attendance(person_name)
        cv2.rectangle(frame, (x, y), (x+w, y+h), (255, 0, 0), 2)
        cv2.putText(frame, person_name, (x, y-10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (255, 0, 0), 2)
    cv2.imshow('Attendance System', frame)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
cap.release()
cv2.destroyAllWindows()
