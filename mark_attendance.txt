import cv2
import pickle
import numpy as np
import os
import csv
import time
from datetime import datetime
from win32com.client import Dispatch
import matplotlib.pyplot as plt
import pandas as pd


# Function to speak text
def speak(text):
    speaker = Dispatch("SAPI.SpVoice")
    speaker.Speak(text)


# Ensure 'Attendance' directory exists
if not os.path.exists('Attendance'):
    os.makedirs('Attendance')

# Initialize video capture and face detector
video = cv2.VideoCapture(0)
facedetect = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')

# Load the trained KNN model
with open('data/knn_model.pkl', 'rb') as model_file:
    knn = pickle.load(model_file)

# Load background image
imgBackground = cv2.imread("bg.png")

# Check if the background image was loaded successfully
if imgBackground is None:
    print("Error: 'bg.png' not found or could not be loaded.")
    exit()

COL_NAMES = ['NAME', 'TIME']

while True:
    ret, frame = video.read()
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    faces = facedetect.detectMultiScale(gray, 1.3, 5)

    for (x, y, w, h) in faces:
        crop_img = frame[y:y + h, x:x + w, :]
        resized_img = cv2.resize(crop_img, (50, 50)).flatten().reshape(1, -1)
        output = knn.predict(resized_img)

        ts = time.time()
        date = datetime.fromtimestamp(ts).strftime("%d-%m-%Y")
        timestamp = datetime.fromtimestamp(ts).strftime("%H:%M-%S")
        csv_path = f"Attendance/Attendance_{date}.csv"
        exist = os.path.isfile(csv_path)

        cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 0, 255), 1)
        cv2.rectangle(frame, (x, y), (x + w, y + h), (50, 50, 255), 2)
        cv2.rectangle(frame, (x, y - 40), (x + w, y), (50, 50, 255), -1)
        cv2.putText(frame, str(output[0]), (x, y - 15), cv2.FONT_HERSHEY_COMPLEX, 1, (255, 255, 255), 1)

        attendance = [str(output[0]), str(timestamp)]

        # Update the background image with the current frame
        imgBackground[162:162 + 480, 55:55 + 640] = frame

    cv2.imshow("Frame", imgBackground)
    k = cv2.waitKey(1)

    if k == ord('o'):
        speak("Attendance Taken..")
        time.sleep(5)
        with open(csv_path, 'a', newline='') as csvfile:
            writer = csv.writer(csvfile)
            if not exist:
                writer.writerow(COL_NAMES)
            writer.writerow(attendance)

    if k == ord('v'):
        # Load attendance data for visualization
        all_attendance = []
        for file in os.listdir('Attendance'):
            if file.endswith('.csv'):
                df = pd.read_csv(f'Attendance/{file}')
                all_attendance.append(df)

        if all_attendance:
            attendance_data = pd.concat(all_attendance, ignore_index=True)
            attendance_summary = attendance_data['NAME'].value_counts()

            plt.figure(figsize=(10, 6))
            attendance_summary.plot(kind='bar', color='skyblue')
            plt.xlabel('Names')
            plt.ylabel('Attendance Count')
            plt.title('Attendance Summary')
            plt.xticks(rotation=45)
            plt.tight_layout()
            plt.show()

    if k == ord('q'):
        break

video.release()
cv2.destroyAllWindows()